{"version":3,"sources":["Components/Card.js","Components/cardList.js","Components/searchBox.js","Components/Scroll.js","Components/robots.js","Containers/app.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","onChange","placeholder","Scroll","props","style","overflow","border","height","children","username","App","onSearchChanged","event","console","log","target","value","setState","searchField","state","this","filteredRobots","filter","robot","toLocaleLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oOAiBeA,EAdJ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,MAAOC,EAAM,EAANA,GACtB,OACI,kBAAC,WAAD,KACA,yBAAKC,UAAU,+DACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cACpB,6BACI,4BAAKF,GACL,+BAAKC,EAAL,SCsBDK,EA5BA,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEPC,EAAgBD,EAAOE,KAAI,SAACC,EAAKC,GAAN,OAC7B,kBAAC,EAAD,CACIT,GAAIK,EAAOI,GAAGT,GACdU,IAAKF,EAAKR,GACVF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAIzB,OACI,kBAAC,WAAD,KAWKO,ICVEK,EAfG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,kBAAC,WAAD,KACI,yBAAKX,UAAU,UACV,2BAAOA,UAAU,oCACjBY,KAAK,SACLC,SAAUF,EACVG,YAAY,0BCKdC,EAZA,SAACC,GAER,OACI,yBAAKC,MAAO,CAACC,SAAU,SAAUC,OAAQ,mBAAoBC,OAAO,UAC/DJ,EAAMK,SADX,MCLCjB,EAAS,CACpB,CACEL,GAAI,EACJF,KAAM,sBACNyB,SAAU,QACVxB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,cACNyB,SAAU,cACVxB,MAAO,kBAET,CACEC,GAAI,EACJF,KAAM,kBACNyB,SAAU,WACVxB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,cACNyB,SAAU,UACVxB,MAAO,iCAET,CACEC,GAAI,EACJF,KAAM,mBACNyB,SAAU,aACVxB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,sBACNyB,SAAU,WACVxB,MAAO,uBAET,CACEC,GAAI,EACJF,KAAM,qBACNyB,SAAU,UACVxB,MAAO,oCAET,CACEC,GAAI,EACJF,KAAM,sCACNyB,SAAU,QACVxB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,wBACNyB,SAAU,WACVxB,MAAO,oCAET,CACEC,GAAI,GACJF,KAAM,wBACNyB,SAAU,sBACVxB,MAAO,2CCPIyB,G,wDA1CX,aAAc,IAAD,8BACT,gBAaJC,gBAAkB,SAACC,GACfC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAACC,YAAaN,EAAMG,OAAOC,SAdzC,EAAKG,MAAM,CACP5B,OAAQA,EACR2B,YAAa,IAJR,E,qDAqBJ,IAAD,EAC0BE,KAAKD,MAA5B5B,EADH,EACGA,OAAQ2B,EADX,EACWA,YACTG,EAAiB9B,EAAO+B,QAAO,SAAAC,GACrC,OAAOA,EAAMvC,KAAKwC,oBAAoBC,SAASP,MAE/C,OACQ,yBAAK/B,UAAU,MAEX,wBAAIA,UAAU,MAAd,uBACA,kBAAC,EAAD,CAAWW,aAAcsB,KAAKT,kBAC9B,kBAAC,EAAD,KAAQ,kBAAC,EAAD,CAAUpB,OAAQ8B,U,GAhC5BK,c,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEC,kBAAC,EAAD,OAGDC,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,a","file":"static/js/main.0f105d51.chunk.js","sourcesContent":["import React,{ Fragment } from \"react\";\n \n\nconst Card=({name, email, id})=>{\n    return(\n        <Fragment >\n        <div className=\" tc code bg-lightest-blue grow br2 dib pa3 ma2 bw2 shadow-5\" >\n            <img alt='robot' src={`https://robohash.org/${id}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p> {email} </p>\n            </div>\n        </div>\n        </Fragment>\n    )\n}\n\nexport default Card;","import React,{Fragment} from 'react';\nimport Card from './Card'\n\n\nconst CardList=({robots}) => {\n\n    const cardComponent = robots.map((user,i) => \n        <Card  \n            id={robots[i].id} \n            key={user.id}\n            name={robots[i].name} \n            email={robots[i].email}\n        />)\n    \n\n    return(\n        <Fragment>\n            {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n            <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n            <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/>\n            <Card id={robots[3].id} name={robots[3].name} email={robots[3].email} />\n            <Card id={robots[4].id} name={robots[4].name} email={robots[4].email} />\n            <Card id={robots[5].id} name={robots[5].name} email={robots[5].email}/>\n            <Card id={robots[6].id} name={robots[6].name} email={robots[6].email} />\n            <Card id={robots[7].id} name={robots[7].name} email={robots[7].email} />\n            <Card id={robots[8].id} name={robots[8].name} email={robots[8].email}/>\n            <Card id={robots[9].id} name={robots[9].name} email={robots[9].email} /> */}\n            {cardComponent}\n        </Fragment>\n    );\n}\n\nexport default CardList;","import React, {Fragment } from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <Fragment>\n            <div className=\"pa2 tc\">\n                 <input className='pa3 ba  b--green bg-lightest-blue' \n                 type='search' \n                 onChange={searchChange} \n                 placeholder='Search the android'\n                 \n                 />\n            </div>\n        </Fragment>       \n    )\n}\n\nexport default SearchBox;","import React from 'react'\n\nconst Scroll = (props) => {\n   \n        return (\n            <div style={{overflow: \"scroll\", border: \"1px solid yellow\", height:'500px' }}>\n                {props.children};\n            </div>\n        );\n    \n    \n};\n\n\nexport default Scroll;","export const robots = [\n  {\n    id: 1,\n    name: 'Anastazija Puflakis',\n    username: 'Cucka',\n    email: 'ZhakiJeAlpha@zharko.biz'\n  },\n  {\n    id: 2,\n    name: 'Aspazi Culi',\n    username: 'Jas Jas Jas',\n    email: 'MarsvoOven@.tv'\n  },\n  {\n    id: 3,\n    name: 'Marija LastJedi',\n    username: 'Samantha',\n    email: 'Josh<3volimga@marija.net'\n  },\n  {\n    id: 4,\n    name: 'Chaka Anica',\n    username: 'Paljoka',\n    email: 'nikogozematelefonot@zhiki.org'\n  },\n  {\n    id: 5,\n    name: 'Krep Gs Kreposan',\n    username: 'Profesorot',\n    email: 'Skandal@motor.com'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Zhiki Protokol',\n    username: 'Materica',\n    email: 'rektorat@zhivka.com'\n  },\n  {\n    id: 7,\n    name: 'Bube Tajm Out Beti',\n    username: 'Nie sne',\n    email: 'chetrstodenariplata@pritisok.com'\n  },\n  {\n    id: 8,\n    name: 'Zharko Zete ili Zetche The Terrible',\n    username: 'Dzver',\n    email: 'nemammail@bakica.com'\n  },\n  {\n    id: 9,\n    name: 'Beti Elizabeta - Vale',\n    username: 'Ljubisha',\n    email: 'akotiodgovaraokakone@ne.mercedes'\n  },\n  {\n    id: 10,\n    name: 'Vesko na gazda mitko ',\n    username: 'sea ke te poducham ',\n    email: 'mojotvnukenajubav@nennene.jasketikazam'\n  }\n];\n","import React,{Fragment, Component} from 'react'\nimport CardList from '../Components/cardList.js'\nimport SearchBox from '../Components/searchBox.js'\nimport Scroll from '../Components/Scroll.js'\nimport { robots } from '../Components/robots'\nimport './app.css'\n\n\n\nclass App extends Component {\n    constructor(){\n        super()\n        this.state={\n            robots: robots,\n            searchField: ''\n        }\n    }\n\n    // componentDidMount () {\n    //         fetch('https://jsonplaceholder.typicode.com/users')\n    //         .then(response=>response.json())\n    //         .then(user=>this.setState({robots:user}));\n    // }\n\n    onSearchChanged = (event) => { \n        console.log(event.target.value);\n        this.setState({searchField: event.target.value }) //go setuvash propertito od state\n        \n        // console.log(filteredRobots);\n    }\n\n    render(){\n        const {robots, searchField} = this.state;\n        const filteredRobots = robots.filter(robot=> {\n        return robot.name.toLocaleLowerCase().includes(searchField)\n            })\n        return (\n                <div className=\"tc\" >\n                    \n                    <h1 className='f1'>  Robots madafakas </h1>\n                    <SearchBox searchChange={this.onSearchChanged}/>\n                    <Scroll><CardList robots={filteredRobots}/></Scroll>\n                    \n                   \n                </div>\n                \n    \n                 \n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/app.js'\n// import { robots } from './robots';\n// import CardList from './cardList.js';\nimport 'tachyons';\n\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n\n   <App/>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}